# <!-- Powered by BMAD™ Core -->
template:
  id: frontend-architecture-template-v2
  name: 前端架构文档
  version: 2.0
  output:
    format: markdown
    filename: docs/ui-architecture.md
    title: "{{project_name}} 前端架构文档"

workflow:
  mode: interactive
  elicitation: advanced-elicitation

sections:
  - id: template-framework-selection
    title: 模板与框架选择
    instruction: |
      审阅已提供的文档（PRD、UX-UI 规范、总架构文档），聚焦提取 AI 前端工具与开发智能体所需的技术实现细节。如无法找到或未提供，请向用户索取。

      在进行前端架构设计之前，确认项目是否使用前端起始模板或基于既有代码库：

      1. 在 PRD、总架构文档与头脑风暴简报中查找是否提及：
         - 前端起始模板（如 Create React App、Next.js、Vite、Vue CLI、Angular CLI 等）
         - UI 套件或组件库起步模板
         - 作为基础的既有前端项目
         - 管理后台模板或其他专项起始模板
         - 设计系统的落地方案

      2. 如提及前端起始模板或既有项目：
         - 请用户通过以下方式之一提供访问：
           - 起始模板文档链接
           - 上传/附加项目文件（适用于小型项目）
           - 提供项目仓库链接
         - 分析起始/既有项目以了解：
           - 预安装依赖与版本
           - 目录结构与文件组织
           - 内置组件与工具
           - 样式方案（CSS Modules、styled-components、Tailwind 等）
           - 状态管理配置（如有）
           - 路由配置
           - 测试设置与模式
           - 构建与开发脚本
         - 基于上述分析，确保你的前端架构与其模式一致

      3. 若未提及前端起始模板但这是一个全新 UI，请先明确 UI 语言与框架：
         - 基于框架选择提出合适的起始模板：
           - React：Create React App、Next.js、Vite + React
           - Vue：Vue CLI、Nuxt.js、Vite + Vue
           - Angular：Angular CLI
           - 或在合适情况下建议流行的 UI 模板
         - 说明这些选择对前端开发的具体优势

      4. 若用户确认不使用起始模板：
         - 需注意所有工具链、打包与配置将手动搭建
         - 从零开始进行前端架构设计

      在继续之前，请记录关于起始模板的决策及其带来的任何约束。
    sections:
      - id: changelog
        title: 变更记录
        type: table
        columns: [日期, 版本, 描述, 作者]
        instruction: 记录文档版本与变更

  - id: frontend-tech-stack
    title: 前端技术栈
    instruction: 从总架构的“技术栈表”抽取。本节必须与总架构文档保持同步。
    elicit: true
    sections:
      - id: tech-stack-table
        title: 技术栈表
        type: table
        columns: [类别, 技术, 版本, 目的, 理由]
        instruction: Fill in appropriate technology choices based on the selected framework and project requirements.
        rows:
          - ["Framework", "{{framework}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["UI Library", "{{ui_library}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - [
              "State Management",
              "{{state_management}}",
              "{{version}}",
              "{{purpose}}",
              "{{why_chosen}}",
            ]
          - ["Routing", "{{routing_library}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["Build Tool", "{{build_tool}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["Styling", "{{styling_solution}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["Testing", "{{test_framework}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - [
              "Component Library",
              "{{component_lib}}",
              "{{version}}",
              "{{purpose}}",
              "{{why_chosen}}",
            ]
          - ["Form Handling", "{{form_library}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["Animation", "{{animation_lib}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["Dev Tools", "{{dev_tools}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]

  - id: project-structure
    title: 项目结构
    instruction: 基于所选框架为 AI 工具明确目录结构，具体到各类文件的放置位置。请遵循该框架的最佳实践与约定生成结构。
    elicit: true
    type: code
    language: plaintext

  - id: component-standards
    title: 组件规范
    instruction: 基于所选框架，定义组件创建的具体模式。
    elicit: true
    sections:
      - id: component-template
        title: 组件模板
        instruction: 按框架最佳实践生成“最小但完整”的组件模板，包含 TypeScript 类型、正确的导入与基本结构。
        type: code
        language: typescript
      - id: naming-conventions
        title: 命名约定
        instruction: 提供适配所选框架的命名约定，覆盖组件、文件、服务、状态管理与其他架构元素。

  - id: state-management
    title: 状态管理
    instruction: 基于所选框架定义状态管理模式。
    elicit: true
    sections:
      - id: store-structure
        title: Store 结构
        instruction: 生成适配所选框架与状态管理方案的目录结构。
        type: code
        language: plaintext
      - id: state-template
        title: 状态管理模板
        instruction: 按框架推荐模式提供状态管理模板/示例，包含 TypeScript 类型与设置/更新/清理等常见操作。
        type: code
        language: typescript

  - id: api-integration
    title: API 集成
    instruction: 基于所选框架定义 API 服务模式。
    elicit: true
    sections:
      - id: service-template
        title: 服务模板
        instruction: 提供遵循框架约定的 API 服务模板，包含正确的 TypeScript 类型、错误处理与异步模式。
        type: code
        language: typescript
      - id: api-client-config
        title: API 客户端配置
        instruction: 展示如何配置所选框架的 HTTP 客户端，包括认证拦截器/中间件与错误处理。
        type: code
        language: typescript

  - id: routing
    title: 路由
    instruction: 基于所选框架定义路由结构与模式。
    elicit: true
    sections:
      - id: route-configuration
        title: 路由配置
        instruction: 提供适配所选框架的路由配置，包括受保护路由模式、按需懒加载以及认证守卫/中间件。
        type: code
        language: typescript

  - id: styling-guidelines
    title: 样式规范
    instruction: Define styling approach based on the chosen framework.
    elicit: true
    sections:
      - id: styling-approach
        title: 样式方案
        instruction: 说明适配所选框架的样式方法（CSS Modules、Styled Components、Tailwind 等）并给出基础模式。
      - id: global-theme
        title: 全局主题变量
        instruction: 提供跨框架可用的 CSS 自定义属性（CSS 变量）主题系统，涵盖颜色、间距、排版、阴影与暗色模式支持。
        type: code
        language: css

  - id: testing-requirements
    title: 测试需求
    instruction: 基于所选框架定义最小化测试要求。
    elicit: true
    sections:
      - id: component-test-template
        title: 组件测试模板
        instruction: 使用框架推荐的测试库，提供基础组件测试模板；包含渲染测试、用户交互测试与 Mock 示例。
        type: code
        language: typescript
      - id: testing-best-practices
        title: 测试最佳实践
        type: numbered-list
        items:
          - "**单元测试**：独立测试各组件"
          - "**集成测试**：测试组件交互"
          - "**端到端测试**：覆盖关键用户流程（Cypress/Playwright）"
          - "**覆盖率目标**：目标 80% 代码覆盖率"
          - "**测试结构**：Arrange-Act-Assert 模式"
          - "**Mock 外部依赖**：API 调用、路由、状态管理"

  - id: environment-configuration
    title: 环境配置
    instruction: 基于所选框架列出所需环境变量，并给出合适的格式与命名约定。
    elicit: true

  - id: frontend-developer-standards
    title: 前端开发者规范
    sections:
      - id: critical-coding-rules
        title: 关键编码规则
        instruction: 列出可避免常见 AI 错误的关键规则，包含通用规则与框架特定规则。
        elicit: true
      - id: quick-reference
        title: 快速参考
        instruction: |
          针对所选框架创建速查表，包含：
          - 常用命令（开发服务器、构建、测试）
          - 关键导入模式
          - 文件命名约定
          - 项目特定的模式与工具
