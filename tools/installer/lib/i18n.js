// Simple i18n helper for the installer CLI
// Usage:
//   const { createI18n } = require('../lib/i18n');
//   const t = createI18n('zh-CN');
//   console.log(t('greet', { name: '‰∏ñÁïå' }))

function format(str, params = {}) {
  return Object.entries(params).reduce((s, [k, v]) => s.replaceAll(`{${k}}`, String(v)), str);
}

const dict = {
  'en-US': {
    'program.description': 'BMad Method installer - Universal AI agent framework for any domain',
    'opt.lang.desc': 'Language/locale (e.g., zh-CN, en-US)',

    'cmd.install.desc': 'Install BMad Method agents and tools',
    'cmd.update.desc': 'Update existing BMad installation',
    'cmd.updateCheck.desc': 'Check for BMad Update',
    'update.checking': 'Checking for updates...',
    'cmd.listExp.desc': 'List available expansion packs',
    'cmd.status.desc': 'Show installation status',
    'cmd.flatten.desc': 'Flatten codebase to XML format',
    'opt.input.desc': 'Input directory to flatten',
    'opt.output.desc': 'Output file path',

    'install.banner.subtitle': 'Universal AI Agent Framework for Any Domain',
    'install.version': 'Installer v{version}',

    'q.directory': 'Enter the full path to your project directory where BMad should be installed:',
    'q.directory.invalid': 'Please enter a valid project path',

    'install.doc.settings': 'Document Organization Settings',
    'install.doc.settings.tip': 'Configure how your project documentation should be organized.',

    'q.select.items': 'Select what to install/update (use space to select, enter to continue):',
    'q.select.items.invalid': 'Please select at least one item to install',

    'q.prdSharded': 'Will the PRD (Product Requirements Document) be sharded into multiple files?',
    'q.archSharded': 'Will the architecture documentation be sharded into multiple files?',

    'warn.arch.off.title': 'IMPORTANT: Architecture Sharding Disabled',
    'warn.arch.off.line1':
      'With architecture sharding disabled, you should still create the files listed',
    'warn.arch.off.line2':
      'in devLoadAlwaysFiles (like coding-standards.md, tech-stack.md, source-tree.md)',
    'warn.arch.off.line3': 'as these are used by the dev agent at runtime.',
    'warn.arch.off.line4':
      'Alternatively, you can remove these files from the devLoadAlwaysFiles list',
    'warn.arch.off.line5': 'in your core-config.yaml after installation.',
    'q.arch.off.ack': 'Do you acknowledge this requirement and want to proceed?',
    cancelled: 'Installation cancelled.',

    'ide.settings': 'IDE Configuration',
    'ide.multiselect.warn': 'IMPORTANT: This is a MULTISELECT! Use SPACEBAR to toggle each IDE!',
    'ide.use.arrows': 'Use arrow keys to navigate',
    'ide.use.space': 'Use SPACEBAR to select/deselect IDEs',
    'ide.use.enter': 'Press ENTER when finished selecting',
    'ide.select':
      'Which IDE(s) do you want to configure? (Select with SPACEBAR, confirm with ENTER):',
    'ide.none.confirm':
      'You have NOT selected any IDEs. This means NO IDE integration will be set up. Is this correct?',
    'ide.return': 'Returning to IDE selection. Remember to use SPACEBAR to select IDEs!',

    'copilot.config': 'GitHub Copilot Configuration',
    'copilot.tip': 'BMad works best with specific VS Code settings for optimal agent experience.',
    'q.copilot.configChoice': 'How would you like to configure GitHub Copilot settings?',
    'copilot.choice.defaults': 'Use recommended defaults (fastest setup)',
    'copilot.choice.manual': 'Configure each setting manually (customize to your preferences)',
    'copilot.choice.skip': "Skip settings configuration (I'll configure manually later)",

    'q.webBundles':
      'Would you like to include pre-built web bundles? (standalone files for ChatGPT, Claude, Gemini)',
    'webBundles.tip': 'Web bundles are standalone files perfect for web AI platforms.',
    'webBundles.choose': 'What web bundles would you like to include?',
    'webBundles.all': 'All available bundles (agents, teams, expansion packs)',
    'webBundles.teams': 'Specific teams only',
    'webBundles.agents': 'Individual agents only',
    'webBundles.custom': 'Custom selection',
    'webBundles.selectTeams': 'Select team bundles to include:',
    'webBundles.selectTeams.invalid': 'You must select at least one team.',
    'q.webBundles.dir': 'Enter directory for web bundles:',

    'update.available': '‚ö†Ô∏è  {name} update available: {current} ‚Üí {latest}',
    'update.install.latest': 'Install latest by running:',
    'update.or': 'or',
    'update.upToDate': '‚ú® {name} is up to date',
    'update.parse.fail': 'Failed to parse npm registry data:',
    'update.failed': 'Update check failed:',
    'update.timeout': 'Update check timed out',
    'missing.files': 'Missing files',
    'modified.files': 'Modified files',
    'installed.expansion.packs': 'Installed expansion packs:',
    'warn.version.unknown': "Could not read version from package.json, using 'unknown'",
    'webBundles.includeAgents': 'Also include individual agent bundles?',
    'status.none': 'No BMad installation found in current directory tree',
    'status.invalid.manifest': 'Invalid installation - manifest not found',
    'list.agents.title': 'Available BMad Agents:',
    'list.agents.install.tip': 'Install with: npx bmad-method-zh install --agent=<id>',
    'list.exp.title': 'Available BMad Expansion Packs:',
    'list.exp.none': 'No expansion packs found.',
    'list.exp.install.tip':
      'Install with: npx bmad-method-zh install --full --expansion-packs <id>',

    // installer.js
    'spinner.analyzing': 'Analyzing installation directory...',
    'spinner.resolving': 'Resolving "{input}" to: {dir}',
    'dir.not.exist': 'The directory {dir} does not exist.',
    'q.dir.action': 'What would you like to do?',
    'dir.action.create': 'Create the directory and continue',
    'dir.action.change': 'Choose a different directory',
    'dir.action.cancel': 'Cancel installation',
    'install.cancelled': 'Installation cancelled.',
    'q.dir.new': 'Enter the new directory path:',
    'q.dir.invalid': 'Please enter a valid directory path',
    'dir.created': '‚úì Created directory: {dir}',
    'dir.create.failed': 'Failed to create directory: {msg}',
    'dir.create.permission': 'You may need to check permissions or use a different path.',
    'spinner.no.v4.update': 'No existing v4 installation found to update',
    'error.install.failed': 'Installation failed',
    'error.install.failed.with': 'Installation failed: {msg}',

    // performFreshInstall & success messages
    'spinner.installing.bmad': 'Installing BMad Method...',
    'spinner.copy.core': 'Copying complete .bmad-core folder...',
    'spinner.copy.common': 'Copying common utilities...',
    'spinner.copy.docs': 'Copying documentation files...',
    'spinner.expansion.only': 'Installing expansion packs only...',
    'spinner.install.webbundles': 'Installing web bundles...',
    'spinner.setup.ide': 'Setting up {ide} integration...',
    'spinner.config.sharding': 'Configuring document sharding settings...',
    'spinner.create.manifest': 'Creating installation manifest...',
    'succeed.install.complete': 'Installation complete!',

    // existing v4 flow
    'exist.v4.found': 'Found existing BMad v4 installation',
    'integrity.checking': 'Checking installation integrity...',
    'issues.detected': 'Installation issues detected:',
    'exist.v4.upgrade.available': 'Upgrade available for BMad core',
    'exist.v4.same.version': 'Same version already installed',
    'exist.v4.newer.installed': 'Installed version is newer than available',
    'q.what.to.do': 'What would you like to do?',
    'no.exp.available': 'No expansion packs available.',
    'q.select.exp': 'Select expansion packs to install/update:',
    'no.exp.selected': 'No expansion packs selected.',
    'spinner.install.exp': 'Installing expansion packs...',
    'succeed.exp.installed': 'Expansion packs installed successfully!',

    // v3 flow
    'exist.v3.found': 'Found BMad v3 installation (bmad-agent/ directory)',
    'upgrade.v3.to.v4.start': 'Starting v3 to v4 upgrade process...',

    // unknown installation
    'unknown.existing': 'Directory contains existing files',
    'found.bmad.core.no.manifest': 'Found: .bmad-core directory (but no manifest)',
    'found.other.files': 'Found: Other files in directory',
    'q.enter.new.dir': 'Enter new installation directory:',

    // update/repair
    'spinner.checking.updates': 'Checking for updates...',
    'spinner.checking.modified': 'Checking for modified files...',
    'found.modified.files': 'Found modified files',
    'q.how.proceed': 'How would you like to proceed?',
    'update.cancelled': 'Update cancelled.',
    'spinner.reinstalling': 'Reinstalling files...',
    'spinner.updating.files': 'Updating files...',
    'spinner.clean.legacy.yml': 'Cleaning up legacy .yml files...',
    'spinner.prepare.repair': 'Preparing to repair installation...',
    'spinner.backup.modified': 'Backing up modified files...',
    'spinner.restoring': 'Restoring files...',
    'warn.source.notfound': '  Warning: Source file not found: {file}',

    // final messages
    'success.bmad.installed': '‚úì BMad Method installed successfully!\n',
    'success.use.in.ide': 'To use BMad agents in {name}:',
    'success.no.ide': 'No IDE configuration was set up.',
    'success.manual.ide': 'You can manually configure your IDE using the agent files in:',
    'summary.title': 'Installation Summary:',
    'summary.core.installed': '‚úì .bmad-core framework installed with all agents and workflows',
    'summary.exps.installed': '‚úì Expansion packs installed:',
    'summary.webbundles.installed': '‚úì Web bundles ({info}) installed to: {dir}',
    'summary.ide.rules': '‚úì IDE rules and configurations set up for: {names}',
    'summary.webbundles.available': 'üì¶ Web Bundles Available:',
    'summary.webbundles.tip1': 'Pre-built web bundles are available and can be added later:',
    'summary.webbundles.tip2': 'Run the installer again to add them to your project',
    'summary.webbundles.tip3': 'These bundles work independently and can be shared, moved, or used',
    'summary.webbundles.tip4': 'in other projects as standalone files.',
    'summary.singleagent.tip1': 'Need other agents? Run: npx bmad-method-zh install --agent=<name>',
    'summary.singleagent.tip2': 'Need everything? Run: npx bmad-method-zh install --full',
    'summary.read.userguide.title':
      'üìñ IMPORTANT: Please read the user guide at docs/user-guide.md (also installed at .bmad-core/user-guide.md)',
    'summary.read.userguide.tip':
      'This guide contains essential information about the BMad workflow and how to use the agents effectively.',
  },
  'zh-CN': {
    'program.description': 'BMad ÊñπÊ≥ïÂÆâË£ÖÂô® - ÈÄöÁî®È¢ÜÂüüÁöÑ AI Êô∫ËÉΩ‰ΩìÊ°ÜÊû∂',
    'opt.lang.desc': 'ËØ≠Ë®Ä/Âå∫ÂüüÔºà‰æãÂ¶ÇÔºözh-CN„ÄÅen-USÔºâ',

    'cmd.install.desc': 'ÂÆâË£Ö BMad ÊñπÊ≥ïÁöÑÊô∫ËÉΩ‰Ωì‰∏éÂ∑•ÂÖ∑',
    'cmd.update.desc': 'Êõ¥Êñ∞Â∑≤ÂÆâË£ÖÁöÑ BMad',
    'cmd.updateCheck.desc': 'Ê£ÄÊü•ÊòØÂê¶ÊúâÂèØÁî®Êõ¥Êñ∞',
    'update.checking': 'Ê≠£Âú®Ê£ÄÊü•Êõ¥Êñ∞‚Ä¶',
    'cmd.listExp.desc': 'ÂàóÂá∫ÂèØÁî®ÁöÑÊâ©Â±ïÂåÖ',
    'cmd.status.desc': 'ÊòæÁ§∫ÂÆâË£ÖÁä∂ÊÄÅ',
    'cmd.flatten.desc': 'Â∞Ü‰ª£Á†ÅÂ∫ìÊãçÂπ≥Êàê XML Ê†ºÂºè',
    'opt.input.desc': 'Ë¶ÅÊãçÂπ≥ÁöÑËæìÂÖ•ÁõÆÂΩï',
    'opt.output.desc': 'ËæìÂá∫Êñá‰ª∂Ë∑ØÂæÑ',

    'install.banner.subtitle': 'ÈÄöÁî®È¢ÜÂüüÁöÑ AI Êô∫ËÉΩ‰ΩìÊ°ÜÊû∂',
    'install.version': 'ÂÆâË£ÖÂô® v{version}',

    'q.directory': 'ËØ∑ËæìÂÖ•Ë¶ÅÂÆâË£Ö BMad ÁöÑÈ°πÁõÆË∑ØÂæÑÔºö',
    'q.directory.invalid': 'ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÈ°πÁõÆË∑ØÂæÑ',

    'install.doc.settings': 'ÊñáÊ°£ÁªÑÁªáËÆæÁΩÆ',
    'install.doc.settings.tip': 'ÈÖçÁΩÆ‰Ω†ÁöÑÈ°πÁõÆÊñáÊ°£Â∫îÂ¶Ç‰ΩïÁªÑÁªá„ÄÇ',

    'q.select.items': 'ËØ∑ÈÄâÊã©Ë¶ÅÂÆâË£Ö/Êõ¥Êñ∞ÁöÑÂÜÖÂÆπÔºàÁ©∫Ê†ºÈÄâÊã©ÔºåÂõûËΩ¶ÁªßÁª≠ÔºâÔºö',
    'q.select.items.invalid': 'ËØ∑Ëá≥Â∞ëÈÄâÊã©‰∏ÄÈ°πÂÜÖÂÆπ',

    'q.prdSharded': 'PRDÔºà‰∫ßÂìÅÈúÄÊ±ÇÊñáÊ°£ÔºâÊòØÂê¶ÈúÄË¶ÅÊãÜÂàÜ‰∏∫Â§ö‰∏™Êñá‰ª∂Ôºü',
    'q.archSharded': 'Êû∂ÊûÑÊñáÊ°£ÊòØÂê¶ÈúÄË¶ÅÊãÜÂàÜ‰∏∫Â§ö‰∏™Êñá‰ª∂Ôºü',

    'warn.arch.off.title': 'ÈáçË¶ÅÊèêÁ§∫ÔºöÂ∑≤Á¶ÅÁî®Êû∂ÊûÑÂàÜÁâá',
    'warn.arch.off.line1': 'Âú®Á¶ÅÁî®ÂàÜÁâáÁöÑÊÉÖÂÜµ‰∏ãÔºå‰Ω†‰ªçÈúÄÂàõÂª∫ devLoadAlwaysFiles ÊâÄÂàóÊñá‰ª∂',
    'warn.arch.off.line2': '‰æãÂ¶ÇÔºöcoding-standards.md„ÄÅtech-stack.md„ÄÅsource-tree.md',
    'warn.arch.off.line3': 'Ëøô‰∫õÊñá‰ª∂‰ºöË¢´ÂºÄÂèëÊô∫ËÉΩ‰ΩìÂú®ËøêË°åÊó∂‰ΩøÁî®„ÄÇ',
    'warn.arch.off.line4':
      'ÊàñËÄÖÔºå‰Ω†‰πüÂèØ‰ª•Âú®ÂÆâË£ÖÂêéÔºå‰ªé core-config.yaml ÁöÑ devLoadAlwaysFiles ‰∏≠ÁßªÈô§Ëøô‰∫õÊñá‰ª∂„ÄÇ',
    'warn.arch.off.line5': '',
    'q.arch.off.ack': 'Â∑≤Áü•ÊÇâÊ≠§Ë¶ÅÊ±ÇÂπ∂ÁªßÁª≠Ôºü',
    cancelled: 'ÂÆâË£ÖÂ∑≤ÂèñÊ∂à„ÄÇ',

    'ide.settings': 'IDE ÈÖçÁΩÆ',
    'ide.multiselect.warn': 'ÈáçË¶ÅÔºöÊ≠§Â§Ñ‰∏∫Â§öÈÄâÔºÅ‰ΩøÁî®Á©∫Ê†ºÂàáÊç¢ÊØè‰∏™ IDEÔºÅ',
    'ide.use.arrows': '‰ΩøÁî®ÊñπÂêëÈîÆÁßªÂä®',
    'ide.use.space': '‰ΩøÁî®Á©∫Ê†ºÈÄâÊã©/ÂèñÊ∂à IDE',
    'ide.use.enter': 'ÈÄâÊã©ÂÆåÊàêÂêéÊåâÂõûËΩ¶',
    'ide.select': '‰Ω†ÊÉ≥ÈÖçÁΩÆÂì™‰∫õ IDEÔºüÔºàÁ©∫Ê†ºÈÄâÊã©ÔºåÂõûËΩ¶Á°ÆËÆ§ÔºâÔºö',
    'ide.none.confirm': '‰Ω†Êú™ÈÄâÊã©‰ªª‰Ωï IDEÔºåËøôÊÑèÂë≥ÁùÄ‰∏ç‰ºöÈÖçÁΩÆ‰ªª‰Ωï IDE ÈõÜÊàê„ÄÇÊòØÂê¶Á°ÆËÆ§Ôºü',
    'ide.return': 'ËøîÂõû IDE ÈÄâÊã©„ÄÇËØ∑ËÆ∞Âæó‰ΩøÁî®Á©∫Ê†ºËøõË°åÈÄâÊã©ÔºÅ',

    'copilot.config': 'GitHub Copilot ÈÖçÁΩÆ',
    'copilot.tip': '‰∏∫Ëé∑ÂæóÊúÄ‰Ω≥‰ΩìÈ™åÔºåÂª∫ËÆÆ‰ΩøÁî®Êé®ËçêÁöÑ VS Code ËÆæÁΩÆ„ÄÇ',
    'q.copilot.configChoice': '‰Ω†Â∏åÊúõÂ¶Ç‰ΩïÈÖçÁΩÆ GitHub Copilot ËÆæÁΩÆÔºü',
    'copilot.choice.defaults': '‰ΩøÁî®Êé®ËçêÈªòËÆ§È°πÔºàÊúÄÂø´ÈÄüÔºâ',
    'copilot.choice.manual': 'ÈÄêÈ°πÊâãÂä®ÈÖçÁΩÆÔºàÊåâ‰∏™‰∫∫ÂÅèÂ•ΩÔºâ',
    'copilot.choice.skip': 'Ë∑≥ËøáËÆæÁΩÆÔºàÁ®çÂêéÂÜçÈÖçÔºâ',

    'q.webBundles': 'ÊòØÂê¶ÂåÖÂê´È¢ÑÊûÑÂª∫ Web BundlesÔºüÔºàÈÄÇÁî®‰∫é ChatGPT„ÄÅClaude„ÄÅGemini Á≠âÔºâ',
    'webBundles.tip': 'Web Bundles ÊòØÈÄÇÂêà Web AI Âπ≥Âè∞ÁöÑÁã¨Á´ãÊñá‰ª∂„ÄÇ',
    'webBundles.choose': '‰Ω†Â∏åÊúõÂåÖÂê´Âì™‰∫õ Web BundlesÔºü',
    'webBundles.all': 'ÊâÄÊúâÂèØÁî®ÔºàÊô∫ËÉΩ‰Ωì„ÄÅÂõ¢Èòü„ÄÅÊâ©Â±ïÂåÖÔºâ',
    'webBundles.teams': '‰ªÖÂõ¢Èòü',
    'webBundles.agents': '‰ªÖÊô∫ËÉΩ‰Ωì',
    'webBundles.custom': 'Ëá™ÂÆö‰πâÈÄâÊã©',
    'webBundles.selectTeams': 'ËØ∑ÈÄâÊã©Ë¶ÅÂåÖÂê´ÁöÑÂõ¢ÈòüÔºö',
    'webBundles.selectTeams.invalid': 'Ëá≥Â∞ëÈÄâÊã©‰∏Ä‰∏™Âõ¢Èòü„ÄÇ',
    'q.webBundles.dir': 'ËØ∑ËæìÂÖ• Web Bundles ËæìÂá∫ÁõÆÂΩïÔºö',

    'update.available': '‚ö†Ô∏è  {name} ÊúâÂèØÁî®Êõ¥Êñ∞Ôºö{current} ‚Üí {latest}',
    'update.install.latest': 'ÂÆâË£ÖÊúÄÊñ∞ÁâàÊú¨Ôºö',
    'update.or': 'Êàñ',
    'update.upToDate': '‚ú® {name} Â∑≤ÊòØÊúÄÊñ∞',
    'update.parse.fail': 'Ëß£Êûê npm Ê≥®ÂÜåË°®Êï∞ÊçÆÂ§±Ë¥•Ôºö',
    'update.failed': 'Ê£ÄÊü•Êõ¥Êñ∞Â§±Ë¥•Ôºö',
    'update.timeout': 'Ê£ÄÊü•Êõ¥Êñ∞Ë∂ÖÊó∂',
    'missing.files': 'Áº∫Â§±Êñá‰ª∂',
    'modified.files': 'Â∑≤‰øÆÊîπÊñá‰ª∂',
    'installed.expansion.packs': 'Â∑≤ÂÆâË£ÖÁöÑÊâ©Â±ïÂåÖÔºö',
    'warn.version.unknown': 'Êó†Ê≥ï‰ªé package.json ËØªÂèñÁâàÊú¨Ôºå‰ΩøÁî® unknown',
    'webBundles.includeAgents': 'ÂêåÊó∂ÂåÖÂê´Âçï‰∏™Êô∫ËÉΩ‰ΩìÁöÑ Bundles ÂêóÔºü',
    'status.none': 'ÂΩìÂâçÁõÆÂΩïÊ†ë‰∏≠Êú™ÂèëÁé∞ BMad ÂÆâË£Ö',
    'status.invalid.manifest': 'ÂÆâË£ÖÊó†Êïà - Êú™ÊâæÂà∞Ê∏ÖÂçï',
    'list.agents.title': 'ÂèØÁî®ÁöÑ BMad Êô∫ËÉΩ‰ΩìÔºö',
    'list.agents.install.tip': 'ÂÆâË£ÖÂëΩ‰ª§Ôºönpx bmad-method-zh install --agent=<id>',
    'list.exp.title': 'ÂèØÁî®ÁöÑ BMad Êâ©Â±ïÂåÖÔºö',
    'list.exp.none': 'Êú™ÂèëÁé∞Êâ©Â±ïÂåÖ„ÄÇ',
    'list.exp.install.tip': 'ÂÆâË£ÖÂëΩ‰ª§Ôºönpx bmad-method-zh install --full --expansion-packs <id>',

    // installer.js
    'spinner.analyzing': 'Ê≠£Âú®ÂàÜÊûêÂÆâË£ÖÁõÆÂΩï‚Ä¶',
    'spinner.resolving': 'Ê≠£Âú®Ëß£Êûê "{input}" ‚Üí {dir}',
    'dir.not.exist': 'ÁõÆÂΩï {dir} ‰∏çÂ≠òÂú®„ÄÇ',
    'q.dir.action': '‰Ω†Â∏åÊúõËøõË°åÂì™‰∏ÄÊ≠•Ôºü',
    'dir.action.create': 'ÂàõÂª∫ËØ•ÁõÆÂΩïÂπ∂ÁªßÁª≠',
    'dir.action.change': 'ÈÄâÊã©ÂÖ∂‰ªñÁõÆÂΩï',
    'dir.action.cancel': 'ÂèñÊ∂àÂÆâË£Ö',
    'install.cancelled': 'ÂÆâË£ÖÂ∑≤ÂèñÊ∂à„ÄÇ',
    'q.dir.new': 'ËØ∑ËæìÂÖ•Êñ∞ÁöÑÁõÆÂΩïË∑ØÂæÑÔºö',
    'q.dir.invalid': 'ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÁõÆÂΩïË∑ØÂæÑ',
    'dir.created': '‚úì Â∑≤ÂàõÂª∫ÁõÆÂΩïÔºö{dir}',
    'dir.create.failed': 'ÂàõÂª∫ÁõÆÂΩïÂ§±Ë¥•Ôºö{msg}',
    'dir.create.permission': '‰Ω†ÂèØËÉΩÈúÄË¶ÅÊ£ÄÊü•ÊùÉÈôêÊàñÊîπÁî®ÂÖ∂‰ªñË∑ØÂæÑ„ÄÇ',
    'spinner.no.v4.update': 'Êú™ÂèëÁé∞ÂèØÊõ¥Êñ∞ÁöÑ v4 ÂÆâË£Ö',
    'error.install.failed': 'ÂÆâË£ÖÂ§±Ë¥•',
    'error.install.failed.with': 'ÂÆâË£ÖÂ§±Ë¥•Ôºö{msg}',

    // performFreshInstall & success messages
    'spinner.installing.bmad': 'Ê≠£Âú®ÂÆâË£Ö BMad ÊñπÊ≥ï‚Ä¶',
    'spinner.copy.core': 'Ê≠£Âú®Â§çÂà∂ .bmad-core ÂÖ®ÈÉ®Êñá‰ª∂‚Ä¶',
    'spinner.copy.common': 'Ê≠£Âú®Â§çÂà∂ common Â∑•ÂÖ∑‚Ä¶',
    'spinner.copy.docs': 'Ê≠£Âú®Â§çÂà∂ÊñáÊ°£Êñá‰ª∂‚Ä¶',
    'spinner.expansion.only': '‰ªÖÂÆâË£ÖÊâ©Â±ïÂåÖ‚Ä¶',
    'spinner.install.webbundles': 'Ê≠£Âú®ÂÆâË£Ö Web Bundles‚Ä¶',
    'spinner.setup.ide': 'Ê≠£Âú®ÈÖçÁΩÆ {ide} ÈõÜÊàê‚Ä¶',
    'spinner.config.sharding': 'Ê≠£Âú®ÈÖçÁΩÆÊñáÊ°£ÂàÜÁâáËÆæÁΩÆ‚Ä¶',
    'spinner.create.manifest': 'Ê≠£Âú®ÂàõÂª∫ÂÆâË£ÖÊ∏ÖÂçï‚Ä¶',
    'succeed.install.complete': 'ÂÆâË£ÖÂÆåÊàêÔºÅ',

    // existing v4 flow
    'exist.v4.found': 'ÂèëÁé∞Â∑≤ÂÆâË£ÖÁöÑ BMad v4',
    'integrity.checking': 'Ê≠£Âú®Ê£ÄÊü•ÂÆâË£ÖÂÆåÊï¥ÊÄß‚Ä¶',
    'issues.detected': 'Ê£ÄÊµãÂà∞ÂÆâË£ÖÈóÆÈ¢òÔºö',
    'exist.v4.upgrade.available': 'BMad Ê†∏ÂøÉÂèØÂçáÁ∫ß',
    'exist.v4.same.version': 'Â∑≤ÂÆâË£ÖÁõ∏ÂêåÁâàÊú¨',
    'exist.v4.newer.installed': 'Â∑≤ÂÆâË£ÖÁâàÊú¨È´ò‰∫éÂèØÁî®ÁâàÊú¨',
    'q.what.to.do': 'ËØ∑ÈÄâÊã©‰∏ã‰∏ÄÊ≠•Êìç‰ΩúÔºö',
    'no.exp.available': 'Ê≤°ÊúâÂèØÁî®ÁöÑÊâ©Â±ïÂåÖ„ÄÇ',
    'q.select.exp': 'ËØ∑ÈÄâÊã©Ë¶ÅÂÆâË£Ö/Êõ¥Êñ∞ÁöÑÊâ©Â±ïÂåÖÔºö',
    'no.exp.selected': 'Êú™ÈÄâÊã©‰ªª‰ΩïÊâ©Â±ïÂåÖ„ÄÇ',
    'spinner.install.exp': 'Ê≠£Âú®ÂÆâË£ÖÊâ©Â±ïÂåÖ‚Ä¶',
    'succeed.exp.installed': 'Êâ©Â±ïÂåÖÂÆâË£ÖÊàêÂäüÔºÅ',

    // v3 flow
    'exist.v3.found': 'ÂèëÁé∞ BMad v3 ÂÆâË£ÖÔºàbmad-agent/ ÁõÆÂΩïÔºâ',
    'upgrade.v3.to.v4.start': 'ÂºÄÂßã v3 ‚Üí v4 ÂçáÁ∫ßÊµÅÁ®ã‚Ä¶',

    // unknown installation
    'unknown.existing': 'ÁõÆÂΩïÂåÖÂê´Â∑≤ÊúâÊñá‰ª∂',
    'found.bmad.core.no.manifest': 'ÂèëÁé∞Ôºö.bmad-core ÁõÆÂΩïÔºà‰ΩÜÁº∫Â∞ëÊ∏ÖÂçïÊñá‰ª∂Ôºâ',
    'found.other.files': 'ÂèëÁé∞ÔºöÁõÆÂΩï‰∏≠Â≠òÂú®ÂÖ∂‰ªñÊñá‰ª∂',
    'q.enter.new.dir': 'ËØ∑ËæìÂÖ•Êñ∞ÁöÑÂÆâË£ÖÁõÆÂΩïÔºö',

    // update/repair
    'spinner.checking.updates': 'Ê≠£Âú®Ê£ÄÊü•Êõ¥Êñ∞‚Ä¶',
    'spinner.checking.modified': 'Ê≠£Âú®Ê£ÄÊü•Ë¢´‰øÆÊîπÁöÑÊñá‰ª∂‚Ä¶',
    'found.modified.files': 'ÂèëÁé∞Ë¢´‰øÆÊîπÁöÑÊñá‰ª∂',
    'q.how.proceed': 'ËØ∑ÈÄâÊã©Â§ÑÁêÜÊñπÂºèÔºö',
    'update.cancelled': 'Â∑≤ÂèñÊ∂àÊõ¥Êñ∞„ÄÇ',
    'spinner.reinstalling': 'Ê≠£Âú®ÈáçÊñ∞ÂÆâË£ÖÊñá‰ª∂‚Ä¶',
    'spinner.updating.files': 'Ê≠£Âú®Êõ¥Êñ∞Êñá‰ª∂‚Ä¶',
    'spinner.clean.legacy.yml': 'Ê≠£Âú®Ê∏ÖÁêÜÊóßÁâà .yml Êñá‰ª∂‚Ä¶',
    'spinner.prepare.repair': 'ÂáÜÂ§á‰øÆÂ§çÂÆâË£Ö‚Ä¶',
    'spinner.backup.modified': 'Ê≠£Âú®Â§á‰ªΩÂ∑≤‰øÆÊîπÊñá‰ª∂‚Ä¶',
    'spinner.restoring': 'Ê≠£Âú®ÊÅ¢Â§çÊñá‰ª∂‚Ä¶',
    'warn.source.notfound': '  Ë≠¶ÂëäÔºöÊú™ÊâæÂà∞Ê∫êÊñá‰ª∂Ôºö{file}',

    // final messages
    'success.bmad.installed': '‚úì BMad ÊñπÊ≥ïÂÆâË£ÖÊàêÂäüÔºÅ\n',
    'success.use.in.ide': 'Âú® {name} ‰∏≠‰ΩøÁî® BMad Êô∫ËÉΩ‰ΩìÔºö',
    'success.no.ide': 'Êú™ÈÖçÁΩÆ‰ªª‰Ωï IDE ÈõÜÊàê„ÄÇ',
    'success.manual.ide': '‰Ω†ÂèØ‰ª•Âú®‰ª•‰∏ãÁõÆÂΩï‰ΩøÁî®Êô∫ËÉΩ‰ΩìÊñá‰ª∂ÊâãÂä®ÈÖçÁΩÆ IDEÔºö',
    'summary.title': 'ÂÆâË£ÖÊëòË¶ÅÔºö',
    'summary.core.installed': '‚úì Â∑≤ÂÆâË£Ö .bmad-core Ê°ÜÊû∂ÔºàÂåÖÂê´ÂÖ®ÈÉ®Êô∫ËÉΩ‰Ωì‰∏éÂ∑•‰ΩúÊµÅÔºâ',
    'summary.exps.installed': '‚úì Â∑≤ÂÆâË£ÖÊâ©Â±ïÂåÖÔºö',
    'summary.webbundles.installed': '‚úì Â∑≤ÂÆâË£Ö Web BundlesÔºà{info}ÔºâÔºö{dir}',
    'summary.ide.rules': '‚úì Â∑≤‰∏∫‰ª•‰∏ã IDE ÈÖçÁΩÆËßÑÂàô‰∏éËÆæÁΩÆÔºö{names}',
    'summary.webbundles.available': 'üì¶ ÂèØÁî®ÁöÑ Web BundlesÔºö',
    'summary.webbundles.tip1': 'Êèê‰æõÈ¢ÑÊûÑÂª∫ÁöÑ Web BundlesÔºåÂèØÁ®çÂêéÊ∑ªÂä†Ôºö',
    'summary.webbundles.tip2': 'ÂÜçÊ¨°ËøêË°åÂÆâË£ÖÂô®ÂèØÂ∞ÜÂÖ∂Ê∑ªÂä†Âà∞‰Ω†ÁöÑÈ°πÁõÆ',
    'summary.webbundles.tip3': 'Ëøô‰∫õÊñá‰ª∂ÂèØÁã¨Á´ã‰ΩøÁî®ÔºåÂèØ‰ª•ÂàÜ‰∫´„ÄÅÁßªÂä®ÔºåÊàñÁî®‰∫éÂÖ∂‰ªñÈ°πÁõÆ',
    'summary.webbundles.tip4': '‰Ωú‰∏∫Áã¨Á´ãÊñá‰ª∂„ÄÇ',
    'summary.singleagent.tip1': 'ÈúÄË¶ÅÂÖ∂‰ªñÊô∫ËÉΩ‰ΩìÔºüËøêË°åÔºönpx bmad-method-zh install --agent=<name>',
    'summary.singleagent.tip2': 'ÈúÄË¶ÅÂÖ®ÈáèÂÆâË£ÖÔºüËøêË°åÔºönpx bmad-method-zh install --full',
    'summary.read.userguide.title':
      'üìñ ÈáçË¶ÅÔºöËØ∑ÈòÖËØª docs/user-guide.mdÔºàÂêåÊó∂ÂÆâË£ÖÂú® .bmad-core/user-guide.mdÔºâ',
    'summary.read.userguide.tip': 'ËØ•ÊåáÂçóÂåÖÂê´ BMad Â∑•‰ΩúÊµÅ‰∏éÂ¶Ç‰ΩïÈ´òÊïà‰ΩøÁî®Êô∫ËÉΩ‰ΩìÁöÑÂÖ≥ÈîÆ‰ø°ÊÅØ„ÄÇ',
  },
};

function createI18n(lang) {
  const locale = dict[lang] ? lang : 'zh-CN';
  const table = dict[locale];
  return function t(key, params) {
    const s = table[key] || dict['en-US'][key] || key;
    return format(s, params);
  };
}

module.exports = { createI18n };
